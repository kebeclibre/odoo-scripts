#!/usr/bin/env python3
import argparse
import os
import sys
from pathlib import Path
import subprocess
import re

home = Path.home()

odooRepos = {
  "odoo": "devel/distr0/odoo",
  "enterprise": "devel/distr0/enterprise"
}

worktrees_root = "devel/worktrees"
worktreepath = worktrees_root + "/{version}"
odoo_bin_path = "odoo/odoo-bin"

branch_re = re.compile("(saas-)?(\d\d)(.\d)?(.*)?")

def get_real_branch_name(version):
  if version.startswith("master"):
    return version

  match = branch_re.match(version)
  saas, major, minor, other = match.groups()

  if other:
    return version

  if not saas and minor and minor != ".0":
    return "saas-" + major + minor

  if not saas and not minor:
    return major + ".0"

  return version


def get_version_absolute_path(version):
  wtrelative = worktreepath.format(version=version).split("/")
  return str(home.joinpath(*wtrelative))

def get_main_repo_path(repo):
  return str(home.joinpath(*odooRepos[repo].split("/")))

def make_worktree(repo, base_branch, gitargs):
  repopath = get_main_repo_path(repo)
  gitparser = argparse.ArgumentParser()
  gitparser.add_argument("-n", "--branch-name")
  args = gitparser.parse_known_args(gitargs)

  wt_name = base_branch
  if args[0].branch_name:
    wt_name = args[0].branch_name

  wt_path = get_version_absolute_path(wt_name) + "/" + repo
  cmd = ["git", "-C", str(repopath), "worktree", "add"]
  cmd.extend(args[1])
  cmd.extend([str(wt_path), base_branch])
  subprocess.run(cmd)

def remove_worktree(repo, version):
  repopath = get_main_repo_path(repo)
  wt_path = get_version_absolute_path(version) + "/" + repo
  subprocess.run(["git", "-C", str(repopath), "worktree", "remove", str(wt_path)])

def remove_version_dir(version):
  wt_path = get_version_absolute_path(version)
  os.rmdir(str(wt_path))


NUMBER_TO_PORT = {
  0: 8069,
  1: 9069,
}

def _list_worktrees():
  return os.listdir(home.joinpath(*worktrees_root.split("/")))

def get_odoo_run_cmd(version, args):
  parser = argparse.ArgumentParser()
  parser.add_argument("-p", "--port", required=False)
  parser.add_argument("-s", "--shell", action="store_true", required=False)
  own, odoo_args = parser.parse_known_args(args)
  odoo_args = [a for a in odoo_args if a != "--"]

  odoo_cli = odoo_args
  if own.shell:
    odoo_cli.append("shell")
  odoo_cli.extend(["--addons-path=" + ",".join(["enterprise", "odoo/addons", "odoo/odoo/addons"])])

  if "-d" not in odoo_args:
    odoo_cli.extend(["-d", version])

  if own.port:
    odoo_cli.append("--xmlrpc-port=" + str(NUMBER_TO_PORT[int(own.port)]))

  cmd = [odoo_bin_path] + odoo_cli
  return cmd

if __name__ == "__main__":
  parser = argparse.ArgumentParser(description='Make worktree')
  parser.add_argument("operation")
  own, additional = parser.parse_known_args()

  operation = own.operation
  if operation in ("add", "remove", "run", "path"):
      parser = argparse.ArgumentParser()
      parser.add_argument("version", nargs="?", default="")
      own, additional = parser.parse_known_args(additional)
      branch = get_real_branch_name(own.version)

      if operation == "add":
          for repo in odooRepos.keys():
            make_worktree(repo, branch, additional)
      if operation == "remove":
          for repo in odooRepos.keys():
            remove_worktree(repo, branch)
          remove_version_dir(branch)

      if operation == "run":
        odoo_cmd = get_odoo_run_cmd(branch, additional)
        print(" ".join(odoo_cmd))

      if operation == "path":
        print(get_version_absolute_path(branch))

  if operation == "bashcomplete":
    parser = argparse.ArgumentParser()
    parser.add_argument("command")
    own, additional = parser.parse_known_args(additional)
    if own.command == "ocd":
      worktrees = _list_worktrees()
      if len(additional) == 1:
          _path = additional[0]
          path = _path.split("/")
          wt_root = home.joinpath(*worktrees_root.split("/"))

          if len(path) == 1 and path[0]:
            worktrees = [w for w in worktrees if path[0] in w]
            print(" ".join(worktrees))
          elif len(path) > 1:
            current_valid = path[:-1]
            candidate = path[-1]
            dirs = wt_root.joinpath(*current_valid)
            candidate = dirs.joinpath(path[-1])
            if candidate.is_dir():
              dir_path = home.joinpath(candidate)
              dirs = os.listdir(dir_path)
              print(" ".join(dirs))
            else:
              candidates = [d for d in os.listdir(dirs) if path[-1] in d]
              if len(candidates) == 1:
                print('/'.join(current_valid + [candidates[0]]))
              else:
                print(" ".join(candidates))
      else:
        print(" ".join(worktrees))

    if own.command == "orun":
      worktrees = _list_worktrees()
      if additional:
        worktrees = [w for w in worktrees if additional[0] in w]
      print(" ".join(worktrees))
