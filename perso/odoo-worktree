#!/usr/bin/env python3
import argparse
import os
from pathlib import Path
import subprocess

home = Path.home()

odooRepos = {
  "odoo": "devel/distr0/odoo",
  "enterprise": "devel/distr0/enterprise"
}

worktreepath = "devel/worktrees/{version}"
odoo_bin_path = "odoo/odoo-bin"

def get_real_branch_name(version):
  if version == "master":
    return version

  if version[:5] == "saas-":
    return version

  if version[:2] not in ("14", "15", "16", "17"):
    return version

  split = version.split(".")
  if len(split) == 1:
    return version + ".0"
  if split[1] == "0":
    return version
  else:
    return "saas-" + version

def get_version_absolute_path(version):
  wtrelative = worktreepath.format(version=version).split("/")
  return str(home.joinpath(*wtrelative))

def get_main_repo_path(repo):
  return str(home.joinpath(*odooRepos[repo].split("/")))

def make_worktree(repo, base_branch, gitargs):
  repopath = get_main_repo_path(repo)
  gitparser = argparse.ArgumentParser()
  gitparser.add_argument("-b", "-B")
  gitparser.add_argument("remaining", nargs=argparse.REMAINDER)
  args = gitparser.parse_args(gitargs)

  wt_name = base_branch
  if args.b:
    wt_name = args.b

  wt_path = get_version_absolute_path(wt_name) + "/" + repo
  cmd = ["git", "-C", str(repopath), "worktree", "add"]
  cmd.extend(gitargs)
  cmd.extend([str(wt_path), base_branch])
  subprocess.run(cmd)

def remove_worktree(repo, version):
  repopath = get_main_repo_path(repo)
  wt_path = get_version_absolute_path(version) + "/" + repo
  subprocess.run(["git", "-C", str(repopath), "worktree", "remove", str(wt_path)])

def remove_version_dir(version):
  wt_path = get_version_absolute_path(version)
  os.rmdir(str(wt_path))


NUMBER_TO_PORT = {
  1: 8069,
  2: 9069,
}

def get_odoo_run_cmd(version, launch_args):
  own_args = []
  if "--" in launch_args:
    index = launch_args.index("--")
    own_args = launch_args[:index]
    launch_args = launch_args[index+1:]

  parser = argparse.ArgumentParser()
  parser.add_argument("-p", "--port", required=False)
  parser.add_argument("-s", "--shell", action="store_true", required=False)
  args = parser.parse_args(own_args)
  odoo_cli = []
  if args.shell:
    odoo_cli.append("shell")
  odoo_cli.extend(["--addons-path=" + ",".join(["enterprise", "odoo/addons", "odoo/odoo/addons"])])

  if "-d" not in launch_args:
    odoo_cli.extend(["-d", version])

  if args.port:
    odoo_cli.append("--xmlrpc-port=" + str(NUMBER_TO_PORT[int(args.port)]))

  cmd = [odoo_bin_path] + odoo_cli + launch_args
  return cmd

if __name__ == "__main__":
  parser = argparse.ArgumentParser(description='Make worktree')
  parser.add_argument("operation")
  parser.add_argument("version")
  parser.add_argument('remaining', nargs=argparse.REMAINDER)

  args = parser.parse_args()
  branch = get_real_branch_name(args.version)

  if args.operation == "add":
      for repo in odooRepos.keys():
        make_worktree(repo, branch, list(args.remaining))
  if args.operation == "remove":
      for repo in odooRepos.keys():
        remove_worktree(repo, branch)
      remove_version_dir(branch)

  if args.operation == "run":
    odoo_cmd = get_odoo_run_cmd(branch, list(args.remaining))
    print(" ".join(odoo_cmd))

  if args.operation == "path":
    print(get_version_absolute_path(branch))
